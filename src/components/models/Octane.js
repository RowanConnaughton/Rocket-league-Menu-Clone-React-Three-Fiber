/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
author: Jako (https://sketchfab.com/fairlight51)
license: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
source: https://sketchfab.com/3d-models/octane-rocket-league-car-9910f0a5d158425bbc7deb60c7a81f69
title: Octane - Rocket League Car
*/

import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import {useSelector} from "react-redux";

 function OctaneModel({ ...props }) {
  const group = useRef()
  const { nodes, materials } = useGLTF('./models/octane/scene.gltf')
  const fennec = useGLTF('./models/fennec/scene.gltf')
  const  dominus = useGLTF('./models/dominus/scene.gltf')
  const model = useSelector(state => state.model);
  const { wheel, priColor, secColor,  winColor, tireColor, rimColor} = model;
  
  


  console.log(model)

  return (
    
    <group ref={group} {...props} dispose={null}>
      <group rotation={[-Math.PI / 2, 0, 0]}>
        <group rotation={[Math.PI / 2, 0, 0]}>
          <group position={[-6.05, 16.9, 0]} rotation={[-Math.PI / 2, 0, 0]} scale={[100, 100, 100]}>
            <mesh geometry={nodes.Octane_Octane_Chassis_0.geometry} material={materials.Octane_Chassis} />
            <mesh geometry={nodes.Octane_Paint_0.geometry} material={materials.Paint} material-color={secColor}/>
            <mesh geometry={nodes.Octane_Octane_Body_0.geometry} material={materials.Octane_Body}  material-color={priColor} />
            <mesh geometry={nodes.Octane_Window_0.geometry} material={materials.Window} material-color={winColor} />
          </group>
          <group position={[45.18, 10.97, 26.22]} rotation={[-Math.PI / 2, 0, 0]} scale={76.42}>
            
          {(() => {
  
  switch (wheel) {
     
    case 'alpha':
          return (
            <mesh          
            geometry={fennec.nodes['Alpha_-_FR_(Fennec)_Alpha_Rim_0'].geometry}
            material={fennec.nodes['Alpha_-_FR_(Fennec)_Alpha_Rim_0'].material}
            material-color={rimColor}
          />
          )
    
    case 'cristiano':
         return (
          <mesh
              geometry={dominus.nodes['Cristiano_-_FR_(Dominus)_Cristiano_0'].geometry}
              material={dominus.nodes['Cristiano_-_FR_(Dominus)_Cristiano_0'].material}
              material-color={rimColor}
            />
         )

     
     default:
         return (
          <mesh            
          geometry={nodes['Dieci_-_FR_(Octane)_Dieci_Rim_0'].geometry}
          material={nodes['Dieci_-_FR_(Octane)_Dieci_Rim_0'].material}
          material-color={rimColor}
        />
         )
  }

})()}


            <mesh
              geometry={nodes['Dieci_-_FR_(Octane)_Dieci_Tread_0'].geometry}
              material={nodes['Dieci_-_FR_(Octane)_Dieci_Tread_0'].material}
              material-color={tireColor}
             
            />
          </group>
          <group
            position={[45.18, 10.97, -26.26]}
            rotation={[-Math.PI / 2, 0, -Math.PI]}
            scale={[-76.42, 76.42, 76.42]}>
           
           
           {(() => {
  
  switch (wheel) {
     
    case 'alpha':
          return (
            <mesh          
            geometry={fennec.nodes['Alpha_-_FL_(Fennec)_Alpha_Rim_0'].geometry}
            material={fennec.nodes['Alpha_-_FL_(Fennec)_Alpha_Rim_0'].material}
           
          />
          )
    
    case 'cristiano':
         return (
          <mesh
              geometry={dominus.nodes['Cristiano_-_FL_(Dominus)_Cristiano_0'].geometry}
              material={dominus.nodes['Cristiano_-_FL_(Dominus)_Cristiano_0'].material}
              
            />
         )

     
     default:
         return (
          <mesh            
          geometry={nodes['Dieci_-_FL_(Octane)_Dieci_Rim_0'].geometry}
          material={nodes['Dieci_-_FL_(Octane)_Dieci_Rim_0'].material}
          
        />
         )
  }

})()}

            <mesh
              geometry={nodes['Dieci_-_FL_(Octane)_Dieci_Tread_0'].geometry}
              material={nodes['Dieci_-_FL_(Octane)_Dieci_Tread_0'].material}
            />
          </group>
          <group position={[-40.92, 12.57, 28.38]} rotation={[-Math.PI / 2, 0, 0]} scale={87.71}>
          {(() => {
  
  switch (wheel) {
     
    case 'alpha':
          return (
            <mesh          
            geometry={fennec.nodes['Alpha_-_BR_(Fennec)_Alpha_Rim_0'].geometry}
            material={fennec.nodes['Alpha_-_BR_(Fennec)_Alpha_Rim_0'].material}
           
          />
          )
    
    case 'cristiano':
         return (
          <mesh
              geometry={dominus.nodes['Cristiano_-_BR_(Dominus)_Cristiano_0'].geometry}
              material={dominus.nodes['Cristiano_-_BR_(Dominus)_Cristiano_0'].material}
              
            />
         )

     
     default:
         return (
          <mesh            
          geometry={nodes['Dieci_-_BR_(Octane)_Dieci_Rim_0'].geometry}
          material={nodes['Dieci_-_BR_(Octane)_Dieci_Rim_0'].material}
          
        />
         )
  }

})()}
            <mesh
              geometry={nodes['Dieci_-_BR_(Octane)_Dieci_Tread_0'].geometry}
              material={nodes['Dieci_-_BR_(Octane)_Dieci_Tread_0'].material}
            />
          </group>
          <group
            position={[-40.92, 12.57, -28.59]}
            rotation={[-Math.PI / 2, 0, -Math.PI]}
            scale={[-87.71, 87.71, 87.71]}>
            {(() => {
  
  switch (wheel) {
     
    case 'alpha':
          return (
            <mesh          
            geometry={fennec.nodes['Alpha_-_BL_(Fennec)_Alpha_Rim_0'].geometry}
            material={fennec.nodes['Alpha_-_BL_(Fennec)_Alpha_Rim_0'].material}
           
          />
          )
    
    case 'cristiano':
         return (
          <mesh
              geometry={dominus.nodes['Cristiano_-_BL_(Dominus)_Cristiano_0'].geometry}
              material={dominus.nodes['Cristiano_-_BL_(Dominus)_Cristiano_0'].material}
              
            />
         )

     
     default:
         return (
          <mesh            
          geometry={nodes['Dieci_-_BL_(Octane)_Dieci_Rim_0'].geometry}
          material={nodes['Dieci_-_BL_(Octane)_Dieci_Rim_0'].material}
          
        />
         )
  }

})()}
            <mesh
              geometry={nodes['Dieci_-_BL_(Octane)_Dieci_Tread_0'].geometry}
              material={nodes['Dieci_-_BL_(Octane)_Dieci_Tread_0'].material}
            />
          </group>
        </group>
      </group>
    </group>
    
  )
}

useGLTF.preload('/scene.gltf')


export default OctaneModel;