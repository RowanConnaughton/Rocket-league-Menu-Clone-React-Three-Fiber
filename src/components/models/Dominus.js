/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
author: Jako (https://sketchfab.com/fairlight51)
license: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
source: https://sketchfab.com/3d-models/dominus-rocket-league-car-f592f249a65f41cd81a0e5aa3d418cb2
title: Dominus - Rocket League Car
*/

import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import {useSelector} from "react-redux";


export default function DominusModel({...props}) {
  const group = useRef()
  const { nodes, materials } = useGLTF('./models/dominus/scene.gltf')
  const  octane = useGLTF('./models/octane/scene.gltf')
  const fennec = useGLTF('./models/fennec/scene.gltf')
  const model = useSelector(state => state.model);
  const { wheel, priColor, secColor,  winColor, tireColor, rimColor} = model;

  return (
   
    <group ref={group} {...props} dispose={null}>
      <group rotation={[-Math.PI / 2, 0, 0]}>
        <group rotation={[Math.PI / 2, 0, 0]}>
          <group position={[41.93, 11.26, 31.85]} rotation={[-Math.PI / 2, 0, 0]} scale={76.01}>
          {(() => {
  
  switch (wheel) {
     
    case 'alpha':
          return (
            <mesh          
            geometry={fennec.nodes['Alpha_-_FR_(Fennec)_Alpha_Rim_0'].geometry}
            material={fennec.nodes['Alpha_-_FR_(Fennec)_Alpha_Rim_0'].material}
            material-color={rimColor}
          />
          )
    
    case 'cristiano':
         return (
          <mesh
              geometry={nodes['Cristiano_-_FR_(Dominus)_Cristiano_0'].geometry}
              material={nodes['Cristiano_-_FR_(Dominus)_Cristiano_0'].material}
              material-color={rimColor}
            />
         )

     
     default:
         return (
          <mesh            
          geometry={octane.nodes['Dieci_-_FR_(Octane)_Dieci_Rim_0'].geometry}
          material={octane.nodes['Dieci_-_FR_(Octane)_Dieci_Rim_0'].material}
          material-color={rimColor}
        />
         )
  }

})()}
            <mesh
              geometry={nodes['Cristiano_-_FR_(Dominus)_Tread_0'].geometry}
              material={nodes['Cristiano_-_FR_(Dominus)_Tread_0'].material}
            />
          </group>
          <group
            position={[41.93, 11.26, -31.53]}
            rotation={[-Math.PI / 2, 0, -Math.PI]}
            scale={[-76.01, 76.01, 76.01]}>
            {(() => {
  
  switch (wheel) {
     
    case 'alpha':
          return (
            <mesh          
            geometry={fennec.nodes['Alpha_-_FL_(Fennec)_Alpha_Rim_0'].geometry}
            material={fennec.nodes['Alpha_-_FL_(Fennec)_Alpha_Rim_0'].material}
            
          />
          )
    
    case 'cristiano':
         return (
          <mesh
              geometry={nodes['Cristiano_-_FL_(Dominus)_Cristiano_0'].geometry}
              material={nodes['Cristiano_-_FL_(Dominus)_Cristiano_0'].material}
              
            />
         )

     
     default:
         return (
          <mesh            
          geometry={octane.nodes['Dieci_-_FL_(Octane)_Dieci_Rim_0'].geometry}
          material={octane.nodes['Dieci_-_FL_(Octane)_Dieci_Rim_0'].material}
          
        />
         )
  }

})()}
            <mesh
              geometry={nodes['Cristiano_-_FL_(Dominus)_Tread_0'].geometry}
              material={nodes['Cristiano_-_FL_(Dominus)_Tread_0'].material}
            />
          </group>
          <group position={[-44.59, 11.8, 32.58]} rotation={[-Math.PI / 2, 0, 0]} scale={[82.06, 82.06, 82.06]}>
          {(() => {
  
  switch (wheel) {
     
    case 'alpha':
          return (
            <mesh          
            geometry={fennec.nodes['Alpha_-_BR_(Fennec)_Alpha_Rim_0'].geometry}
            material={fennec.nodes['Alpha_-_BR_(Fennec)_Alpha_Rim_0'].material}
            
          />
          )
    
    case 'cristiano':
         return (
          <mesh
              geometry={nodes['Cristiano_-_BR_(Dominus)_Cristiano_0'].geometry}
              material={nodes['Cristiano_-_BR_(Dominus)_Cristiano_0'].material}
             
            />
         )

     
     default:
         return (
          <mesh            
          geometry={octane.nodes['Dieci_-_BR_(Octane)_Dieci_Rim_0'].geometry}
          material={octane.nodes['Dieci_-_BR_(Octane)_Dieci_Rim_0'].material}
         
        />
         )
  }

})()}
            <mesh
              geometry={nodes['Cristiano_-_BR_(Dominus)_Tread_0'].geometry}
              material={nodes['Cristiano_-_BR_(Dominus)_Tread_0'].material}
            />
          </group>
          <group
            position={[-44.59, 11.8, -32.58]}
            rotation={[-Math.PI / 2, 0, -Math.PI]}
            scale={[-83.11, 83.11, 83.11]}>
            {(() => {
  
  switch (wheel) {
     
    case 'alpha':
          return (
            <mesh          
            geometry={fennec.nodes['Alpha_-_BL_(Fennec)_Alpha_Rim_0'].geometry}
            material={fennec.nodes['Alpha_-_BL_(Fennec)_Alpha_Rim_0'].material}
            
          />
          )
    
    case 'cristiano':
         return (
          <mesh
              geometry={nodes['Cristiano_-_BL_(Dominus)_Cristiano_0'].geometry}
              material={nodes['Cristiano_-_BL_(Dominus)_Cristiano_0'].material}
              
            />
         )

     
     default:
         return (
          <mesh            
          geometry={octane.nodes['Dieci_-_BL_(Octane)_Dieci_Rim_0'].geometry}
          material={octane.nodes['Dieci_-_BL_(Octane)_Dieci_Rim_0'].material}
          
        />
         )
  }

})()}
            <mesh
              geometry={nodes['Cristiano_-_BL_(Dominus)_Tread_0'].geometry}
              material={nodes['Cristiano_-_BL_(Dominus)_Tread_0'].material}
              material-color={tireColor}
            />
          </group>
          <group position={[-8.96, 16.86, 0]} rotation={[-Math.PI / 2, 0, 0]} scale={[100, 100, 100]}>
            <mesh geometry={nodes.Dominus_Dominus_Chassis_0.geometry} material={materials.Dominus_Chassis} />
            <mesh geometry={nodes.Dominus_Paint_0.geometry} material={materials.Paint} material-color={secColor} />
            <mesh geometry={nodes.Dominus_Headlights_0.geometry} material={materials.Headlights} />
            <mesh geometry={nodes.Dominus_Dominus_Body_0.geometry} material={materials.Dominus_Body}  material-color={priColor}/>
            <mesh geometry={nodes.Dominus_Window_0.geometry} material={materials.Window} material-color={winColor} />
          </group>
        </group>
      </group>
    </group>
    
  )
}

useGLTF.preload('/scene.gltf')
