/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
author: Jako (https://sketchfab.com/fairlight51)
license: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
source: https://sketchfab.com/3d-models/fennec-rocket-league-car-5b43b50b6eeb4a12a29671df3418f57a
title: Fennec - Rocket League Car
*/

import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'


const FennecModel =({wheel, priColor,secColor,winColor,rimColor,tireColor, ...props }) => {
  const group = useRef()
  const { nodes, materials } = useGLTF('./models/fennec/scene.gltf')
  const  octane = useGLTF('./models/octane/scene.gltf')
  const  dominus = useGLTF('./models/dominus/scene.gltf')

  

  console.log(nodes);
  
  return (
    <group ref={group} {...props} dispose={null}>
      <group rotation={[-Math.PI / 2, 0, 0]}>
        <group rotation={[Math.PI / 2, 0, 0]}>
          <group
            position={[45.39, 10.97, -29.96]}
            rotation={[-Math.PI / 2, 0, -Math.PI]}
            scale={[-76.42, 76.42, 76.42]}>
           

           {(() => {
  
  switch (wheel) {
     
    case 'alpha':
          return (
            <mesh castShadow      
            geometry={nodes['Alpha_-_FR_(Fennec)_Alpha_Rim_0'].geometry}
            material={nodes['Alpha_-_FR_(Fennec)_Alpha_Rim_0'].material}
            material-color={rimColor}
          />
          )
    
    case 'cristiano':
         return (
          <mesh castShadow
              geometry={dominus.nodes['Cristiano_-_FR_(Dominus)_Cristiano_0'].geometry}
              material={dominus.nodes['Cristiano_-_FR_(Dominus)_Cristiano_0'].material}
              material-color={rimColor}
            />
         )

     
     default:
         return (
          <mesh  castShadow          
          geometry={octane.nodes['Dieci_-_FR_(Octane)_Dieci_Rim_0'].geometry}
          material={octane.nodes['Dieci_-_FR_(Octane)_Dieci_Rim_0'].material}
          material-color={rimColor}
        />
         )
  }

})()}

          
           
            <mesh castShadow
              geometry={nodes['Alpha_-_FR_(Fennec)_Dieci_Tread_0'].geometry}
              material={nodes['Alpha_-_FR_(Fennec)_Dieci_Tread_0'].material}
            />
          </group>
          <group position={[45.58, 10.97, 29.09]} rotation={[-Math.PI / 2, 0, 0]} scale={76.42}>
            
          {(() => {
  
  switch (wheel) {
     
    case 'alpha':
          return (
            <mesh castShadow        
            geometry={nodes['Alpha_-_FL_(Fennec)_Alpha_Rim_0'].geometry}
            material={nodes['Alpha_-_FL_(Fennec)_Alpha_Rim_0'].material}
            
          />
          )
    
    case 'cristiano':
         return (
          <mesh castShadow
              geometry={dominus.nodes['Cristiano_-_FL_(Dominus)_Cristiano_0'].geometry}
              material={dominus.nodes['Cristiano_-_FL_(Dominus)_Cristiano_0'].material}
            />
         )

     
     default:
         return (
          <mesh castShadow            
          geometry={octane.nodes['Dieci_-_FL_(Octane)_Dieci_Rim_0'].geometry}
          material={octane.nodes['Dieci_-_FL_(Octane)_Dieci_Rim_0'].material}
          
        />
         )
  }

})()}



            <mesh castShadow
              geometry={nodes['Alpha_-_FL_(Fennec)_Dieci_Tread_0'].geometry}
              material={nodes['Alpha_-_FL_(Fennec)_Dieci_Tread_0'].material}
            />
          </group>
          <group
            position={[-39.83, 12.07, -30.36]}
            rotation={[-Math.PI / 2, 0, Math.PI]}
            scale={[-82.35, 82.35, 82.35]}>
             {(() => {
  
  switch (wheel) {
     
    case 'alpha':
          return (
            <mesh castShadow         
            geometry={nodes['Alpha_-_BR_(Fennec)_Alpha_Rim_0'].geometry}
            material={nodes['Alpha_-_BR_(Fennec)_Alpha_Rim_0'].material}
            
          />
          )
    
    case 'cristiano':
         return (
          <mesh castShadow
              geometry={dominus.nodes['Cristiano_-_BR_(Dominus)_Cristiano_0'].geometry}
              material={dominus.nodes['Cristiano_-_BR_(Dominus)_Cristiano_0'].material}
            />
         )

     
     default:
         return (
          <mesh castShadow        
          geometry={octane.nodes['Dieci_-_BR_(Octane)_Dieci_Rim_0'].geometry}
          material={octane.nodes['Dieci_-_BR_(Octane)_Dieci_Rim_0'].material}
          
        />
         )
  }

})()}
            <mesh castShadow
              geometry={nodes['Alpha_-_BR_(Fennec)_Dieci_Tread_0'].geometry}
              material={nodes['Alpha_-_BR_(Fennec)_Dieci_Tread_0'].material}
            />
          </group>
          <group position={[-39.92, 12.07, 30.26]} rotation={[-Math.PI / 2, 0, 0]} scale={82.35}>
          {(() => {
  
  switch (wheel) {
     
    case 'alpha':
          return (
            <mesh  castShadow        
            geometry={nodes['Alpha_-_BL_(Fennec)_Alpha_Rim_0'].geometry}
            material={nodes['Alpha_-_BL_(Fennec)_Alpha_Rim_0'].material}
            
          />
          )
    
    case 'cristiano':
         return (
          <mesh castShadow
              geometry={dominus.nodes['Cristiano_-_BL_(Dominus)_Cristiano_0'].geometry}
              material={dominus.nodes['Cristiano_-_BL_(Dominus)_Cristiano_0'].material}
            />
         )

     
     default:
         return (
          <mesh   castShadow         
          geometry={octane.nodes['Dieci_-_BL_(Octane)_Dieci_Rim_0'].geometry}
          material={octane.nodes['Dieci_-_BL_(Octane)_Dieci_Rim_0'].material}
          
        />
         )
  }

})()}
            <mesh castShadow
              geometry={nodes['Alpha_-_BL_(Fennec)_Dieci_Tread_0'].geometry}
              material={nodes['Alpha_-_BL_(Fennec)_Dieci_Tread_0'].material}
              material-color={tireColor}
            />
          </group>
          <group position={[-3.52, 16.74, 0]} rotation={[-Math.PI / 2, 0, 0]} scale={[100, 100, 100]}>
            <mesh castShadow geometry={nodes.Fennec_Fennec_Chassis_0.geometry} material={materials.Fennec_Chassis}  />
            <mesh castShadow geometry={nodes.Fennec_Headlights_0.geometry} material={materials.Headlights}  />
            <mesh castShadow geometry={nodes.Fennec_Fennec_Body_0.geometry} material={materials.Fennec_Body}  material-color={priColor} />
            <mesh castShadow geometry={nodes.Fennec_Window_0.geometry} material={materials.Window} material-color={winColor} />
            <mesh castShadow geometry={nodes.Fennec_Paint_0.geometry} material={materials.Paint} material-color={secColor} />
          </group>
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('/scene.gltf')

export default FennecModel